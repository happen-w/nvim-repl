*repl.txt* A Neovim repl manager

Author: Samuel Roeca

Table of Contents

1. Introduction ... |repl_intro|
2. Configuration .. |repl_configuration|
3. Commands ....... |repl_commands|
4. Mappings ....... |repl_mappings|
5. Credits ........ |repl_credits|

==============================================================================
                                                                   *repl_intro*
1. INTRODUCTION~

nvim-repl makes it easy to create, use, and remove an interactive repl within
Neovim. It uses a Neovim-specific api and is only intended to be used with the
latest version of Neovim (0.5.0+).

==============================================================================
                                                           *repl_configuration*
2. CONFIGURATION~

*g:repl_filetype_commands*
Type: Dictionary[String, String]
Default: defined in plugin/repl.vim

Map a filetype to a repl starting command using this configuration variable.
Eg, if you automatically want to run a "python" repl for python filetypes and
a "node" repl for javascript filetypes, your configuration might look like
this: >

  let g:repl_filetype_commands = {
      \ 'javascript': 'node',
      \ 'python': 'python',
      \ }

*g:repl_default*
Type: String
Default: &shell

The default repl selected. Used when no configured repl is found for a
particular filetype.

*g:repl_split*
Type: String
Default: 'vertical'

Set the split position of repl window. Default will split vertically. Vertical
and horizontal respect the user-configured global splitright and splitbottom
settings.

Available options: >

  - 'bottom'
  - 'top'
  - 'left'
  - 'right'
  - 'horizontal'
  - 'vertical'

*g:repl_height*
Type: Number
Default: ''

Set repl window's height (number of lines) if `g:repl_split` set 'bottom'/'top'.

*g:repl_width*
Type: Number
Default: ''

Set repl window's width (number of columns) if `g:repl_split` set 'left'/'right'.

==============================================================================
                                                                *repl_commands*
3. COMMANDS~

*:Repl* *:ReplOpen*
  open the repl. Takes the name of an executable repl as an optional argument.
  If no argument is provided, defaults to either the filetype-associated repl
  or the configured default repl.
*:ReplClose*
  close the repl, if open.
*:ReplToggle*
  if repl is open, close it. If repl is closed, open it using either the
  filetype-associated repl or the configured default repl.
*:ReplClear*
  clear on open repl's screen. Similar to the bash command clear(1). Note:
  only works if the repl supports "<C-l>" as a screen-clearning mechanism.
*:ReplRunCell*
  run the cell starting with '# %%', and jump the cursor the next cell

==============================================================================
                                                                *repl_mappings*
4. MAPPINGS~

Two pluggable mappings are provided.

<Plug>*ReplSendLine* send the current line to the repl.
<Plug>*ReplSendVisual* send the visual selection to the repl.

The user should map these pluggable mappings. Our recommended mappings: >

  nnoremap <leader><leader>e <Cmd>ReplToggle<CR>
  nmap <leader>e <Plug>ReplSendLine
  xmap <leader>e <Plug>ReplSendVisual

Note: as always, pluggable mappings require a recursive mapping. Eg, don't try
to "nnoremap" a pluggable mapping. It won't work.

==============================================================================
                                                                 *repl_credits*
5. CREDITS~

This plugin was inspired by vim-slime: https://github.com/jpalardy/vim-slime .

Samuel Roeca heavily modified that program to the point where it has become
its own plugin.

vim:tw=78:ts=8:ft=help:norl:
